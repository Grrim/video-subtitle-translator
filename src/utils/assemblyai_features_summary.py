"""
Podsumowanie funkcji AssemblyAI skonfigurowanych w systemie
Wszystkie funkcje sƒÖ w≈ÇƒÖczone dla najwy≈ºszej jako≈õci transkrypcji
"""

from typing import Dict, List
from ..utils.logger import get_logger

logger = get_logger(__name__)

class AssemblyAIFeaturesSummary:
    """Klasa do wy≈õwietlania podsumowania w≈ÇƒÖczonych funkcji AssemblyAI"""
    
    @staticmethod
    def get_enabled_features() -> Dict[str, Dict[str, str]]:
        """
        Zwraca s≈Çownik wszystkich w≈ÇƒÖczonych funkcji AssemblyAI
        
        Returns:
            S≈Çownik z kategoriami i opisami funkcji
        """
        return {
            "üéØ Podstawowe funkcje wysokiej jako≈õci": {
                "Word-level timestamps": "Precyzyjne timestampy dla ka≈ºdego s≈Çowa (dok≈Çadno≈õƒá do milisekund)",
                "Speaker labels": "Automatyczne wykrywanie i etykietowanie m√≥wiƒÖcych (Speaker Diarization)",
                "Language detection": "Automatyczne wykrywanie jƒôzyka m√≥wionego",
                "Punctuate & format": "Automatyczna interpunkcja i formatowanie tekstu",
                "High boost": "Wysoki poziom wzmocnienia jako≈õci rozpoznawania"
            },
            
            "ü§ñ Zaawansowane funkcje AI": {
                "Auto highlights": "Automatyczne wyr√≥≈ºnianie kluczowych fragment√≥w i temat√≥w",
                "Auto chapters": "Automatyczne tworzenie rozdzia≈Ç√≥w i segmentacja tre≈õci",
                "Sentiment analysis": "Analiza sentymentu wypowiedzi (pozytywny/negatywny/neutralny)",
                "Entity detection": "Wykrywanie encji (nazwy os√≥b, miejsc, organizacji)",
                "IAB categories": "Kategoryzacja tre≈õci wed≈Çug standardu IAB (Interactive Advertising Bureau)"
            },
            
            "üõ°Ô∏è Bezpiecze≈Ñstwo i jako≈õƒá": {
                "Content safety": "Wykrywanie potencjalnie niebezpiecznych tre≈õci",
                "Audio quality optimization": "Optymalizacja dla r√≥≈ºnych jako≈õci audio",
                "Noise handling": "Zaawansowane radzenie sobie z szumem t≈Ça",
                "Multiple speakers": "Obs≈Çuga wielu m√≥wiƒÖcych jednocze≈õnie"
            },
            
            "‚öôÔ∏è Ustawienia precyzji": {
                "No profanity filter": "Brak filtrowania wulgaryzm√≥w dla maksymalnej dok≈Çadno≈õci",
                "No PII redaction": "Brak ukrywania danych osobowych dla pe≈Çnej transkrypcji",
                "Single channel optimization": "Optymalizacja dla pojedynczego kana≈Çu audio",
                "High confidence threshold": "Wysoki pr√≥g pewno≈õci dla lepszej jako≈õci"
            }
        }
    
    @staticmethod
    def print_features_summary():
        """Wy≈õwietl podsumowanie wszystkich w≈ÇƒÖczonych funkcji"""
        features = AssemblyAIFeaturesSummary.get_enabled_features()
        
        logger.info("üöÄ KONFIGURACJA ASSEMBLYAI - NAJWY≈ªSZA JAKO≈öƒÜ TRANSKRYPCJI")
        logger.info("=" * 70)
        
        for category, feature_list in features.items():
            logger.info(f"\n{category}")
            logger.info("-" * 50)
            
            for feature_name, description in feature_list.items():
                logger.info(f"‚úÖ {feature_name}: {description}")
        
        logger.info("\n" + "=" * 70)
        logger.info("üé¨ System gotowy do transkrypcji najwy≈ºszej jako≈õci!")
    
    @staticmethod
    def get_quality_metrics_info() -> Dict[str, str]:
        """
        Zwraca informacje o metrykach jako≈õci kt√≥re system bƒôdzie ≈õledziƒá
        
        Returns:
            S≈Çownik z opisami metryk
        """
        return {
            "Confidence Score": "Og√≥lna pewno≈õƒá transkrypcji (0.0 - 1.0)",
            "Word-level Accuracy": "Dok≈Çadno≈õƒá timestamp√≥w na poziomie s≈Ç√≥w",
            "Speaker Detection Quality": "Jako≈õƒá wykrywania i rozr√≥≈ºniania m√≥wiƒÖcych",
            "Processing Speed": "Czas przetwarzania wzglƒôdem d≈Çugo≈õci audio",
            "Language Detection Confidence": "Pewno≈õƒá automatycznego wykrywania jƒôzyka",
            "Segment Quality": "Jako≈õƒá podzia≈Çu na naturalne segmenty",
            "Entity Recognition Rate": "Skuteczno≈õƒá wykrywania encji",
            "Sentiment Analysis Coverage": "Pokrycie analizy sentymentu"
        }
    
    @staticmethod
    def validate_api_features(transcript_result: Dict) -> List[str]:
        """
        Waliduje czy wszystkie oczekiwane funkcje zosta≈Çy zwr√≥cone przez API
        
        Args:
            transcript_result: Wynik transkrypcji z API
            
        Returns:
            Lista ostrze≈ºe≈Ñ o brakujƒÖcych funkcjach
        """
        warnings = []
        
        # Sprawd≈∫ podstawowe funkcje
        if not transcript_result.get('words'):
            warnings.append("‚ö†Ô∏è Brak word-level timestamps")
        
        if not transcript_result.get('segments'):
            warnings.append("‚ö†Ô∏è Brak segment√≥w z speaker labels")
        
        # Sprawd≈∫ funkcje premium
        expected_premium_features = [
            ('highlights', 'Auto highlights'),
            ('sentiment', 'Sentiment analysis'),
            ('entities', 'Entity detection'),
            ('chapters', 'Auto chapters'),
            ('categories', 'IAB categories'),
            ('content_safety', 'Content safety')
        ]
        
        for feature_key, feature_name in expected_premium_features:
            if feature_key not in transcript_result:
                warnings.append(f"‚ö†Ô∏è Brak funkcji: {feature_name}")
        
        if not warnings:
            logger.info("‚úÖ Wszystkie funkcje AssemblyAI dzia≈ÇajƒÖ prawid≈Çowo!")
        else:
            for warning in warnings:
                logger.warning(warning)
        
        return warnings